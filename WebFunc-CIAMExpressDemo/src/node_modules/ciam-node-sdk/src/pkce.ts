import { randomBytes, createHash } from 'crypto'
export type PKCECodePair = {
  codeVerifier: string;
  codeChallenge: string;
  createdAt: Date;
};

/**
 * Implements *base64url-encode* (RFC 4648 ยง 5) without padding, which is NOT
 * the same as regular base64 encoding.
 */
 export const base64urlEncode = (str: Buffer): string => {
  return str
    .toString('base64')
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=/g, '')
}

/**
 * Generates a code_verifier and code_challenge, as specified in rfc7636.
 */
/**
 * The maximum length for a code verifier for the best security we can offer.
 * Please note the NOTE section of RFC 7636 ยง 4.1 - the length must be >= 43,
 * but <= 128, **after** base64 url encoding. This means 32 code verifier bytes
 * encoded will be 43 bytes, or 96 bytes encoded will be 128 bytes. So 96 bytes
 * is the highest valid value that can be used.
 */
// export const generatePKCECodes = (): PromiseLike<PKCECodePair> => {
//   const RECOMMENDED_CODE_VERIFIER_LENGTH = 96;
//   const PKCE_CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
//   const output = new Uint32Array(RECOMMENDED_CODE_VERIFIER_LENGTH);
//   const createdAt = new Date();
//   crypto.getRandomValues(output);
//   const codeVerifier = base64urlEncode(
//     Array.from(output)
//       .map((num: number) => PKCE_CHARSET[num % PKCE_CHARSET.length])
//       .join(''),
//   );
//   return crypto.subtle
//     .digest('SHA-256', new TextEncoder().encode(codeVerifier))
//     .then((buffer: ArrayBuffer) => {
//       const hash = new Uint8Array(buffer);
//       let binary = '';
//       const hashLength = hash.byteLength;
//       for (let i = 0; i < hashLength; i++) {
//         binary += String.fromCharCode(hash[i]);
//       }
//       return binary;
//     })
//     .then(base64urlEncode)
//     .then((codeChallenge: string) => ({ codeChallenge, codeVerifier, createdAt }));
// };

export const sha256 = (buffer: Buffer): Buffer => {
  return createHash('sha256').update(buffer).digest()
}

export const generatePKCECodes = (): PKCECodePair => {
  const codeVerifier = base64urlEncode(randomBytes(64))
  const codeChallenge = base64urlEncode(sha256(Buffer.from(codeVerifier)))
  const createdAt = new Date()
  const codePair = {
    codeVerifier,
    codeChallenge,
    createdAt
  }
  return codePair
}
