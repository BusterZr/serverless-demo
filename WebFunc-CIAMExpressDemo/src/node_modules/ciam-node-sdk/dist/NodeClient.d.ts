import { BaseClient } from 'ciam-js-sdk';
import { PKCECodePair } from './pkce';
import { NodeClientProps, AuthTokens } from './types';
export declare class NodeClient extends BaseClient {
    props: NodeClientProps;
    timeout?: number;
    pkce?: string;
    constructor(props: NodeClientProps);
    getPkce(): PKCECodePair;
    setPkce(value: string): void;
    clearPkce(): void;
    setAuthTokens(auth: AuthTokens): void;
    getAuthTokens(): AuthTokens;
    isPending(): boolean;
    logout(): Promise<string>;
    generateAuthUrl(): Promise<string>;
    login(): Promise<void>;
    /**
     * @name authorize
     * @description OAuth2 认证普通授权码模式登录,认证后302到redirect_url
     *
     * @returns {boolean}
     * @memberof NodeClient
     */
    authorizeByNormal(): Promise<string>;
    /**
     * @name authorize
     * @description OAuth2 认证,认证后302到redirect_url
     *
     * @returns {boolean}
     * @memberof NodeClient
     */
    authorize(): Promise<string>;
    /**
     * @name fetchToken
     * @description 获取token，更新本地缓存
     *
     * @param {string} code authorize 302返回的code，或者本地auth中的refresh_token
     * @isRefresh {boolean} 是否刷新token
     *
     * @example
     * NodeClient.fetchToken(
     *  'code value',
     *  true
     * )
     *
     * @returns {Promise<AuthTokens>}
     * @memberof NodeClient
     */
    fetchToken(code: string, isRefresh?: boolean): Promise<AuthTokens>;
    armRefreshTimer(refreshToken: string, timeoutDuration: number): void;
    reloadUri(): void;
}
