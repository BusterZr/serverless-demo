import { BaseClientProps, RequestProxyType, AuthStorageProxyType, AuthTokens, JWTIDToken } from './types';
export declare abstract class BaseClient {
    props: BaseClientProps;
    request: RequestProxyType;
    authStorage: AuthStorageProxyType;
    constructor(props: BaseClientProps);
    setAuth(auth: AuthTokens): void;
    getAuth(): AuthTokens;
    clearAuth(): void;
    getUser(): JWTIDToken;
    /**
     * @name updateUser
     * @name_zh 更新用户信息
     * @description 更新用户字段数据
     *
     * @param {any} payload 更新的用户字段
     * @example
     * authenticationClient.updateUser({phoneNumber: '176xxxx6754')}
     *
     * @returns {Promise<JWTIDToken>}
     * @memberof AuthenticationClient
     */
    updateUser(payload: any): Promise<JWTIDToken | null>;
    /**
     * @name fetchUser
     * @name_zh 获取用户信息
     * @description 接口获取用户信息
     *
     * @param {string} token access_token
     * @example
     * authenticationClient.fetchUser(access_token)
     *
     * @returns {Promise<JWTIDToken>}
     * @memberof AuthenticationClient
     */
    fetchUser(token: string): Promise<JWTIDToken | null>;
    isAuthenticated(): boolean;
}
