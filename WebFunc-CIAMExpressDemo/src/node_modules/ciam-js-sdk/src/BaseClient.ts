import { BaseClientProps, RequestProxyType, AuthStorageProxyType, AuthTokens, JWTIDToken } from './types';
import createRequest from './BaseRequest';
import createAuthLocal from './BaseAuthProxy';
import { isEmpty } from './util';
import jwtDecode from 'jwt-decode';

export abstract class BaseClient {
  props: BaseClientProps;
  request: RequestProxyType;
  authStorage: AuthStorageProxyType;
  constructor(props: BaseClientProps) {
    const authStorage = (props.authStorageProxy?.createAuthLocal || createAuthLocal)();
    this.props = props;
    this.request = (props.requestProxy?.createRequest || createRequest)(authStorage);
    this.authStorage = authStorage;
  }
  setAuth(auth: AuthTokens): void {
    if (isEmpty(auth)) return;
    const user: JWTIDToken = jwtDecode(auth.id_token) as JWTIDToken;
    this.authStorage.setUser(user);
    this.authStorage.setAuth(auth);
  }
  getAuth(): AuthTokens {
    return this.authStorage.getAuth();
  }
  clearAuth(): void {
    return this.authStorage.clear();
  }
  getUser(): JWTIDToken {
    return this.authStorage.getUser();
  }
  /**
   * @name updateUser
   * @name_zh 发送短信验证码
   * @description 发送短信验证码, 短信验证码的有效时间为 60 s。
   *
   * @param {any} payload 更新的用户字段
   * @example
   * authenticationClient.updateUser({phoneNumber: '176xxxx6754')}
   *
   * @returns {Promise<JWTIDToken>}
   * @memberof AuthenticationClient
   */
  async updateUser(payload: any): Promise<JWTIDToken | null> {
    const user: JWTIDToken | null = this.authStorage.getUser();
    if (!user?.sub) {
      console.error('缺少sub参数', user);
      throw new Error('缺少sub参数');
    }
    const api = `${this.props.userDomain}/user/${user.sub}`;
    try {
      const res: any = await this.request.put(api, { data: { ...payload } });
      if (res.statusCode === 200) {
        this.authStorage.setUser(Object.assign({}, user, res.data));
        return res.data;
      }
      return Promise.reject(res);
    } catch (error) {
      throw error;
    }
  }
  isAuthenticated(): boolean {
    return !isEmpty(this.authStorage.getAuth());
  }
  abstract login(): void;
  abstract logout(): void;
}
